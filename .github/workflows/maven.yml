# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
###########################
name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    #services:
     # postgres:
      #  image: postgres
       # env:
        #  POSTGRES_USER: user
         # POSTGRES_HOST_AUTH_METHOD: trust
          #POSTGRES_DB: book_store
        #ports:
        #- 5432:5432
    # needed because the postgres container does not provide a healthcheck//
        #options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    
    steps:
    - uses: actions/checkout@v1
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: docker compose Postgres
      run: |
        docker-compose up -d postgres
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Fill DB
      run: psql book_store -U user -h 172.19.0.2 -p 5432 < rdb/init.psql
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    # Test
    - name: Build with Maven
      run: mvn clean verify --file bestofbooks/pom.xml
    #CD
    - name: Add remote origin
      run: |
        git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
    - run: heroku buildpacks:set heroku/java -a ${{ secrets.HEROKU_APP_NAME }}
    - name: Deploy to Heroku
      run: |
        git push heroku HEAD:master -f
